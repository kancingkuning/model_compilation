# -*- coding: utf-8 -*-
"""Sklearn NN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14q8OqbshIL7XJ1i0bGSOFZiqSoT12z2L
"""

from google.colab import files
upload = files.upload()

import pandas as pd
import re
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

df = pd.read_csv('/content/stemmed.csv')
df.drop(columns=['Unnamed: 0', 'negative', 'neutral', 'positive'], axis=1, inplace=True)
df

df['tweet'] = df['tweet'].astype(str)

def cleaning(tweet):
  
  string = tweet.lower()
  string = re.sub(r'[^a-zA-Z]+', ' ', string)
  string = re.sub('0-9', ' ', string)
  
  return string
df['tweet'] = df['tweet'].apply(cleaning)

!pip install sastrawi
from Sastrawi.StopWordRemover.StopWordRemoverFactory import StopWordRemoverFactory
reader = df['tweet']
factory = StopWordRemoverFactory()
stopwords = factory.create_stop_word_remover()
df['tweet'] = df['tweet'].apply(stopwords.remove)

pd.Series(" ".join(reader).split()).value_counts(10)

df.tweet.duplicated().sum()

df['tweet'] = df.tweet.drop_duplicates()

df.label.value_counts()

tweet = df.tweet.to_list()

#import library model
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
import pickle
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import classification_report
from sklearn.model_selection import KFold
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix

"""#TFIDF"""

tfidf_vectorizer = TfidfVectorizer()
tfidf_vectorizer.fit(tweet)

X = tfidf_vectorizer.transform(tweet)
y = df['label']

pickle.dump(tfidf_vectorizer, open('feature.p', 'wb'))

X

y

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify = y)

"""#Model NN SKLearn"""

model = MLPClassifier()
model.fit(X_train, y_train)

pickle.dump(model, open('model.p', 'wb'))

history = model.predict(X_test)
print(classification_report(y_test, history))

# Generate confusion matrix
from sklearn.metrics import plot_confusion_matrix
matrix = plot_confusion_matrix(model, X_test, y_test,
                                 cmap=plt.cm.Blues,
                                 normalize='true')
plt.title('Confusion matrix for our classifier')
plt.show(matrix)
plt.show();

#evaluasi
kf = KFold(n_splits=5, random_state=42, shuffle=True)
accuracies = []
y = y

for iteration, data in enumerate(kf.split(X), start=1):
  data_train = X[data[0]]
  target_train = y[data[0]]

  data_test = X[data[1]]
  target_test = y[data[1]]

  clf = MLPClassifier()
  clf.fit(data_train, target_train)

  preds = clf.predict(data_test)

  accuracy = accuracy_score(target_test, preds)

  print('training ke-', iteration)
  print(classification_report(target_test, preds))
  print('-------------------------------------------')

  accuracies.append(accuracy)

average_accuracy = np.mean(accuracies)

print()
print()
print()
print('rata-rata akurasi:', average_accuracy)

text = """
makanannya enak banget!!!
"""
teks = tfidf_vectorizer.transform([cleaning(text)])

result = model.predict(teks)[0]
print('sentiment', result)

text = '''
rasa ga enak!
'''
teks = tfidf_vectorizer.transform([cleaning(text)])

result = model.predict(teks)[0]
print('sentiment', result)

text = '''
saya mau makan
'''
teks = tfidf_vectorizer.transform([cleaning(text)])

result = model.predict(teks)[0]
print('sentiment', result)